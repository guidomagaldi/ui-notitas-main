// Generated by CoffeeScript 2.0.0-beta7
void function () {
  var AutomaticAPIClient, config, extend, noErr, qs, randomBytes, request, url;
  randomBytes = require('crypto').randomBytes;
  request = require('request');
  url = require('url');
  qs = require('qs');
  config = require('./config');
  extend = require('underscore').extend;
  AutomaticAPIClient = function () {
    AutomaticAPIClient.prototype.auth = config.auth;
    AutomaticAPIClient.prototype.api = config.api;
    function AutomaticAPIClient(param$) {
      var cache$;
      {
        cache$ = param$;
        this.appId = cache$.appId;
        this.appSecret = cache$.appSecret;
        this.accessToken = cache$.accessToken;
      }
      this.state = randomBytes(48).toString('hex');
      this.getAccessToken = function (done) {
        var accessTokenUrl, baseUrl, cache$1, cache$2, expiresAt, now, options, params, refreshToken, scope;
        now = new Date().getTime();
        if (this.accessToken) {
          cache$1 = this.accessToken;
          expiresAt = cache$1.expiresAt;
          refreshToken = cache$1.refreshToken;
          scope = cache$1.scope;
          if (!(expiresAt < now))
            return done(noErr, this.accessToken);
          params = {
            refresh_token: refreshToken,
            scope: scope,
            grant_type: 'refresh_token'
          };
        } else {
          params = {
            client_id: this.appId,
            client_secret: this.appSecret,
            code: this.code,
            grant_type: 'authorization_code'
          };
        }
        cache$2 = this.auth;
        baseUrl = cache$2.baseUrl;
        accessTokenUrl = cache$2.accessTokenUrl;
        options = {
          method: 'POST',
          url: '' + baseUrl + accessTokenUrl,
          form: params
        };
        return request(options, function (this$) {
          return function (error, data, response) {
            var access_token, cache$3, expires_in, refresh_token, token_type, user;
            if (null != error)
              return done(error);
            cache$3 = JSON.parse(response);
            access_token = cache$3.access_token;
            refresh_token = cache$3.refresh_token;
            expires_in = cache$3.expires_in;
            scope = cache$3.scope;
            user = cache$3.user;
            token_type = cache$3.token_type;
            this$.accessToken = {
              accessToken: access_token,
              refreshToken: refresh_token,
              expiresAt: now + expires_in,
              scope: scope,
              user: user,
              type: token_type
            };
            return done(noErr, this$.accessToken);
          };
        }(this));
      };
      this.fetch = function (options, done) {
        options = extend({}, options);
        if (!(null != options.uri))
          return done(new Error('uri is required'));
        return this.getAccessToken(function (this$) {
          return function (err, param$1) {
            var accessToken;
            accessToken = param$1.accessToken;
            if (null != err)
              return done(err);
            options.uri = '' + this$.api.baseUrl + options.uri;
            if (null != options.headers)
              options.headers;
            else
              options.headers = {};
            options.headers.Authorization = '' + this$.auth.method + ' ' + accessToken;
            return request(options, done);
          };
        }(this));
      };
    }
    AutomaticAPIClient.prototype.getAuthorizeUrl = function () {
      var authorizeUrl, baseUrl, cache$, query, responseType, scopes, scopesSeparator;
      cache$ = this.auth;
      baseUrl = cache$.baseUrl;
      authorizeUrl = cache$.authorizeUrl;
      scopes = cache$.scopes;
      scopesSeparator = cache$.scopesSeparator;
      responseType = cache$.responseType;
      query = qs.stringify({
        client_id: this.appId,
        scope: scopes.join(scopesSeparator),
        response_type: responseType,
        state: this.state
      });
      return '' + baseUrl + authorizeUrl + '?' + query;
    };
    AutomaticAPIClient.prototype.setAccessToken = function (token) {
      return this.accessToken = JSON.parse(token);
    };
    AutomaticAPIClient.prototype.accessGranted = function (param$, done) {
      var cache$, code, state;
      {
        cache$ = param$;
        state = cache$.state;
        code = cache$.code;
      }
      if (!(state === this.state))
        return done(new Error('Invalid state'));
      this.code = code;
      return this.getAccessToken(done);
    };
    AutomaticAPIClient.prototype.getTrips = function (options, done) {
      if (null == options)
        options = {};
      options.uri = '/trips';
      return this.fetch(options, done);
    };
    AutomaticAPIClient.prototype.getTrip = function (options, done) {
      if (null == options)
        options = {};
      if (!(null != options.id))
        return done(new Error('id is required'));
      options.uri = '/trips/' + options.id;
      delete options.id;
      return this.fetch(options, done);
    };
    return AutomaticAPIClient;
  }();
  module.exports.AutomaticAPIClient = AutomaticAPIClient;
  noErr = null;
}.call(this);
